/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 15.2 		*/
/*  Created On : 15-���-2023 21:01:52 				*/
/*  DBMS       : PostgreSQL 						*/
/* ---------------------------------------------------- */
DROP SEQUENCE IF EXISTS model__seq;
CREATE SEQUENCE model__seq START 3 increment 50;
grant usage, select on model__seq to topt_user;


/* Drop Tables */	
DROP TABLE IF EXISTS model__h CASCADE
;

/* Create Tables */

CREATE TABLE com_user__h
(
	hid bigint NOT NULL,	-- technical id
	hd timestamp NOT NULL,
	hop varchar(8) NOT NULL,
	huser varchar(32) NULL,
	hip varchar(32) NULL,
	id bigint NOT NULL,	-- origin id
	created timestamp NOT NULL,
	cax bigint NOT NULL,
	eax bigint NULL,
	tech_comm varchar(1024) NULL,
	state varchar(32) NOT NULL,	-- active; blocked; deleted
	state_date timestamp NOT NULL,
	name varchar (64) NOT NULL
) PARTITION BY RANGE (hd)
;

CREATE INDEX "model__hidx_id" ON model__h (id ASC);


/* Create Table Comments, Sequences for Autonumber Columns */
COMMENT ON COLUMN model__h.hid
	IS 'history row id'
;
COMMENT ON COLUMN com_user__h.hd
	IS 'history timestamp'
;
COMMENT ON COLUMN com_user__h.huser
	IS 'current_user'
;
COMMENT ON COLUMN com_user__h.hip
	IS 'inet_client_addr'
;

COMMENT ON COLUMN com_user__h.id
	IS 'origin id'
;

COMMENT ON COLUMN com_user__h.state
	IS 'active; blocked; deleted'
;

do $$
declare
	dDateStart timestamp := date_trunc('month', now());
	dDateTo timestamp;
	iMonthes integer := 5*12;
	vSql varchar(256);
begin
	for i in 1..iMonthes
	loop
		dDateTo := dDateStart + interval '1 month';
		vSql := 'CREATE TABLE model__hpa' ||to_char(dDateStart, 'yyyy_mm') || ' PARTITION OF model__h FOR VALUES FROM ('''
			|| to_char(dDateStart, 'yyyy.mm.dd hh24:mi:ss') || ''') TO (''' || to_char(dDateTo, 'yyyy.mm.dd hh24:mi:ss') ||''')';
		--RAISE NOTICE '%', vSql;
		execute vSql;
		dDateStart := dDateStart + interval '1 month';
	end loop;
end $$;	

grant select on model__h to topt_user;

DROP SEQUENCE IF EXISTS model__hs;
CREATE SEQUENCE model__hs START 1;
grant usage, select on model__hs to topt_user;

 CREATE OR REPLACE FUNCTION model__tbdf()
  RETURNS trigger 
  SECURITY DEFINER
AS
$$
BEGIN
    INSERT INTO model__h(hid, hd, hop, huser, hip,
	    id, created, cax, eax, tech_comm, state, state_date, name)
	    VALUES (nextval('model__hs'), now(), TG_OP, session_user, inet_client_addr(),
        OLD.id, OLD.created, OLD.cax, OLD.eax, OLD.tech_comm, OLD.state, OLD.state_date, OLD.name);
RETURN OLD;
END;
$$
LANGUAGE 'plpgsql';
  CREATE or replace TRIGGER model__tbd
  before delete
  ON model
  FOR EACH ROW
  EXECUTE PROCEDURE model__tbdf();


CREATE OR REPLACE FUNCTION model__tbif()
  RETURNS trigger 
  SECURITY DEFINER
AS
$$
BEGIN
    INSERT INTO model__h(hid, hd, hop, huser, hip,
	    id, created, cax, eax, tech_comm, state, state_date, name)
	    VALUES (nextval('model__hs'), now(), TG_OP, session_user, inet_client_addr(),
        NEW.id, NEW.created, NEW.cax, NEW.eax, NEW.tech_comm, NEW.state, NEW.state_date, NEW.name);
RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';
CREATE or replace TRIGGER model__tbi
  before INSERT
  ON model
  FOR EACH ROW
  EXECUTE PROCEDURE model__tbif();

CREATE or replace TRIGGER model__tbu
  before UPDATE
  ON model
  FOR EACH ROW
  WHEN (OLD.* IS DISTINCT FROM NEW.*)
  EXECUTE PROCEDURE model__tbif();
  
